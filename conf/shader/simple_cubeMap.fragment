//
// gouraud.frag - Gouraud Shading 用フラグメントシェーダ
//
#version 400


in vec2 texCrd;     // texture 2D coordinate inputed from vertex shader

in vec3 Color; //Color inputed from vertex shader


//uniform sampler2D cTexture;
uniform samplerCube cTexture;

//uniform int textureFlag;



out vec4 fColor;



//========================================
// Prototype declaration
//========================================
vec4 cubeToLatLon(samplerCube cubemap, vec2 inUV);


/**
*
*/
void main(void)
{
  vec2 a = texCrd * vec2(3.14159265, 1.57079633);

  vec2 c = cos(a);
  vec2 s = sin(a);

//fColor = texture2DProj( cTexture, vec3(vec2(s.x,c.x) * c.y,  s.y ) );


  //------------------------------------------------------------------------
  // Taken from [https://forum.openframeworks.cc/t/equirectangular-projection-shader/19937/2]
  //------------------------------------------------------------------------

//  vec2 tc = texCrd.st / vec2(2.0) + 0.75;  //only line modified from the shader toy example
//  vec2 tc = texCrd.st / vec2(2.0) + 1.0;  //only line modified from the shader toy example
//  vec2 tc = texCrd.st / vec2(2.0) + 0.5;  //only line modified from the shader toy example
//  vec2 tc = texCrd.st + 0.5;  //only line modified from the shader toy example
  vec2 tc = texCrd.st ;  //only line modified from the shader toy example

  // Inversing "s" coordinate (horizontal)
  tc.x = 1.0 - tc.x;

  // 
  if( tc.x > 0.75 )
  {
    tc.x = tc.x - 0.75 ;
  }
  else
  {
    tc.x = tc.x + 0.25 ;
  }


  vec2 thetaphi = ((tc * 2.0) - vec2(1.0)) * vec2(3.1415926535897932384626433832795, 1.5707963267948966192313216916398);
  vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));
 


  //---------------------------------------------
  // Conventional 2D-texture (for check)
  //---------------------------------------------
//  fColor = texture2D( cTexture, texCrd );
//  fColor = texture( cTexture, texCrd );



//  fColor = textureCube( cTexture, rayDirection );
//  fColor = textureCube( cTexture, texCrd );
//  fColor = texture( cTexture, vec3(texCrd, 0.0) );



  //-----------------------------------
  // For equirectangular projection
  //-----------------------------------
  fColor = texture( cTexture, rayDirection );

//  fColor = cubeToLatLon( cTexture, texCrd );



  //------------------------
  // Forcing output color based on 2d coordinate (for debugging)
  //------------------------
  //fColor = vec4( texCrd, 1, 0);

  //------------------------
  // Forcing output white color (for debugging)
  //------------------------
//  fColor = vec4(1.0, 1.0, 1.0, 0.0);

  //function main
}



/**
* Taken from "http://alexcpeterson.com/2015/08/25/converting-a-cube-map-to-a-sphericalequirectangular-map/"
*/
vec4 cubeToLatLon(samplerCube cubemap, vec2 inUV)
{

  vec2 inUV2 = vec2( 1.0- inUV.x,  1.0-inUV.y );

 const float PI = 3.141592653589793238462643383;

 vec3 cubmapTexCoords;

 cubmapTexCoords.x = -sin(inUV2.x * PI * 2.0) * sin(inUV2.y * PI);
 cubmapTexCoords.y = cos(inUV2.y * PI);
 cubmapTexCoords.z = -cos(inUV2.x * PI * 2.0) * sin(inUV2.y * PI);

 return texture(cubemap, cubmapTexCoords);
}
